from fastapi import APIRouter, Depends, UploadFile, File, HTTPException, Query
from typing import Dict, Any, List, Optional
import pandas as pd
import tempfile
import os
from pathlib import Path

router = APIRouter(prefix="/excel2processcapability", tags=["excel2processcapability"])

# Initialize analyzer with default language
from .analyzer import ProcessCapabilityAnalyzer
analyzer = ProcessCapabilityAnalyzer()

@router.post("/analyze")
async def analyze_excel_file(
    file: UploadFile = File(...),
    language: str = Query("en", description="Language for responses (en/zh)")
):
    """Analyze uploaded Excel file for process capability"""
    try:
        # Set analyzer language
        analyzer.language = language
        
        # Save uploaded file temporarily
        with tempfile.NamedTemporaryFile(delete=False, suffix='.xlsx') as tmp_file:
            content = await file.read()
            tmp_file.write(content)
            tmp_file.flush()
            
            # Read Excel file
            excel_file = pd.ExcelFile(tmp_file.name)
            sheets = []
            
            for sheet_name in excel_file.sheet_names:
                df = pd.read_excel(tmp_file.name, sheet_name=sheet_name, nrows=5)
                sheets.append({
                    'name': sheet_name,
                    'columns': df.columns.tolist(),
                    'row_count': len(pd.read_excel(tmp_file.name, sheet_name=sheet_name)),
                    'preview': df.head(3).values.tolist()
                })
            
            # Clean up temp file
            os.unlink(tmp_file.name)
            
            return {
                'sheets': sheets,
                'total_sheets': len(sheets),
                'analysis_type': 'process_capability',
                'language': language
            }
            
    except Exception as e:
        error_msg = f"Failed to analyze Excel file: {str(e)}"
        if language == 'zh':
            error_msg = f"分析Excel文件失败: {str(e)}"
        raise HTTPException(status_code=400, detail=error_msg)

@router.post("/generate")
async def generate_capability_analysis(
    file: UploadFile = File(...),
    sheet_name: str = None,
    chart_type: str = "cpk_analysis",
    spec_lower: float = None,
    spec_upper: float = None,
    language: str = Query("en", description="Language for responses (en/zh)")
):
    """Generate process capability analysis from Excel file"""
    try:
        # Set analyzer language
        analyzer.language = language
        
        # Save uploaded file temporarily
        with tempfile.NamedTemporaryFile(delete=False, suffix='.xlsx') as tmp_file:
            content = await file.read()
            tmp_file.write(content)
            tmp_file.flush()
            
            # Read Excel file
            if sheet_name:
                df = pd.read_excel(tmp_file.name, sheet_name=sheet_name)
            else:
                df = pd.read_excel(tmp_file.name)
            
            # Add specification limits if provided
            if spec_lower is not None and spec_upper is not None:
                df['spec_lower'] = spec_lower
                df['spec_upper'] = spec_upper
            
            # Validate data using analyzer
            validation_result = analyzer.validate_data(df, chart_type)
            if not validation_result['valid']:
                raise HTTPException(status_code=400, detail=validation_result['message'])
            
            # Generate JSL template
            jsl_template = generate_capability_jsl(df, chart_type, language)
            
            # Clean up temp file
            os.unlink(tmp_file.name)
            
            return {
                'jsl_content': jsl_template,
                'chart_type': chart_type,
                'language': language,
                'validation': validation_result,
                'data_info': {
                    'rows': len(df),
                    'columns': len(df.columns),
                    'column_types': df.dtypes.to_dict()
                }
            }
            
    except HTTPException:
        raise
    except Exception as e:
        error_msg = f"Failed to generate analysis: {str(e)}"
        if language == 'zh':
            error_msg = f"生成分析失败: {str(e)}"
        raise HTTPException(status_code=400, detail=error_msg)

def generate_capability_jsl(df: pd.DataFrame, chart_type: str, language: str = 'en') -> str:
    """Generate JSL template for process capability"""
    
    # Language-specific comments
    comments = {
        'en': {
            'header': "// Auto-generated Process Capability JSL Script\n// Generated by Excel2ProcessCapability Extension",
            'open_csv': "// Open the CSV file",
            'calculate': "// Calculate process capability",
            'save': "// Save capability analysis",
            'report': "// Generate capability report",
            'close': "// Close the data table"
        },
        'zh': {
            'header': "// 自动生成的过程能力JSL脚本\n// 由Excel2ProcessCapability扩展生成",
            'open_csv': "// 打开CSV文件",
            'calculate': "// 计算过程能力",
            'save': "// 保存能力分析",
            'report': "// 生成能力报告",
            'close': "// 关闭数据表"
        }
    }
    
    lang_comments = comments.get(language, comments['en'])
    
    template = f"""{lang_comments['header']}

{lang_comments['open_csv']}
dt = Open( "{{{{CSV_PATH}}}}" );

{lang_comments['calculate']}
capability = dt << Distribution(
    Continuous Distribution( Column( :{{{{VALUE_COLUMN}}}} ) ),
    Capability Analysis(
        Spec Limits( {{{{SPEC_LOWER}}}}, {{{{SPEC_UPPER}}}} ),
        Target( ({{{{SPEC_LOWER}}}} + {{{{SPEC_UPPER}}}}) / 2 )
    )
);

{lang_comments['save']}
capability << Save Picture( "process_capability_analysis.png" );

{lang_comments['report']}
capability << Capability Report;

{lang_comments['close']}
Close( dt );
"""
    
    # Replace placeholders
    numeric_cols = df.select_dtypes(include=['number']).columns.tolist()
    if numeric_cols:
        template = template.replace('{{VALUE_COLUMN}}', numeric_cols[0])
    
    if 'spec_lower' in df.columns:
        spec_lower = df['spec_lower'].iloc[0]
        template = template.replace('{{SPEC_LOWER}}', str(spec_lower))
    
    if 'spec_upper' in df.columns:
        spec_upper = df['spec_upper'].iloc[0]
        template = template.replace('{{SPEC_UPPER}}', str(spec_upper))
    
    return template

@router.post("/validate")
async def validate_data_for_capability(
    file: UploadFile = File(...),
    chart_type: str = Query("cpk_analysis", description="Type of analysis to validate"),
    language: str = Query("en", description="Language for responses (en/zh)")
):
    """Validate Excel data for process capability analysis"""
    try:
        # Set analyzer language
        analyzer.language = language
        
        # Save uploaded file temporarily
        with tempfile.NamedTemporaryFile(delete=False, suffix='.xlsx') as tmp_file:
            content = await file.read()
            tmp_file.write(content)
            tmp_file.flush()
            
            # Read Excel file
            df = pd.read_excel(tmp_file.name)
            
            # Validate data using analyzer
            validation_result = analyzer.validate_data(df, chart_type)
            
            # Clean up temp file
            os.unlink(tmp_file.name)
            
            return {
                'valid': validation_result['valid'],
                'message': validation_result['message'],
                'chart_type': chart_type,
                'language': language,
                'details': {
                    'missing_columns': validation_result.get('missing_columns', []),
                    'numeric_columns': validation_result.get('numeric_columns', []),
                    'data_shape': df.shape,
                    'available_columns': df.columns.tolist()
                }
            }
            
    except Exception as e:
        error_msg = f"Failed to validate data: {str(e)}"
        if language == 'zh':
            error_msg = f"数据验证失败: {str(e)}"
        raise HTTPException(status_code=400, detail=error_msg)
