from fastapi import APIRouter, Depends, UploadFile, File, HTTPException
from typing import Dict, Any, List
import pandas as pd
import tempfile
import os
from pathlib import Path

router = APIRouter(prefix="/excel2processcapability", tags=["excel2processcapability"])

@router.post("/analyze")
async def analyze_excel_file(file: UploadFile = File(...)):
    """Analyze uploaded Excel file for process capability"""
    try:
        # Save uploaded file temporarily
        with tempfile.NamedTemporaryFile(delete=False, suffix='.xlsx') as tmp_file:
            content = await file.read()
            tmp_file.write(content)
            tmp_file.flush()
            
            # Read Excel file
            excel_file = pd.ExcelFile(tmp_file.name)
            sheets = []
            
            for sheet_name in excel_file.sheet_names:
                df = pd.read_excel(tmp_file.name, sheet_name=sheet_name, nrows=5)
                sheets.append({
                    'name': sheet_name,
                    'columns': df.columns.tolist(),
                    'row_count': len(pd.read_excel(tmp_file.name, sheet_name=sheet_name)),
                    'preview': df.head(3).values.tolist()
                })
            
            # Clean up temp file
            os.unlink(tmp_file.name)
            
            return {
                'sheets': sheets,
                'total_sheets': len(sheets),
                'analysis_type': 'process_capability'
            }
            
    except Exception as e:
        raise HTTPException(status_code=400, detail=f"Failed to analyze Excel file: {str(e)}")

@router.post("/generate")
async def generate_capability_analysis(
    file: UploadFile = File(...),
    sheet_name: str = None,
    chart_type: str = "cpk_analysis",
    spec_lower: float = None,
    spec_upper: float = None
):
    """Generate process capability analysis from Excel file"""
    try:
        # Save uploaded file temporarily
        with tempfile.NamedTemporaryFile(delete=False, suffix='.xlsx') as tmp_file:
            content = await file.read()
            tmp_file.write(content)
            tmp_file.flush()
            
            # Read Excel file
            if sheet_name:
                df = pd.read_excel(tmp_file.name, sheet_name=sheet_name)
            else:
                df = pd.read_excel(tmp_file.name)
            
            # Add specification limits if provided
            if spec_lower is not None and spec_upper is not None:
                df['spec_lower'] = spec_lower
                df['spec_upper'] = spec_upper
            
            # Generate JSL template
            jsl_template = generate_capability_jsl(df, chart_type)
            
            # Clean up temp file
            os.unlink(tmp_file.name)
            
            return {
                'jsl_content': jsl_template,
                'chart_type': chart_type,
                'data_info': {
                    'rows': len(df),
                    'columns': len(df.columns),
                    'column_types': df.dtypes.to_dict()
                }
            }
            
    except Exception as e:
        raise HTTPException(status_code=400, detail=f"Failed to generate analysis: {str(e)}")

def generate_capability_jsl(df: pd.DataFrame, chart_type: str) -> str:
    """Generate JSL template for process capability"""
    template = """// Auto-generated Process Capability JSL Script
// Generated by Excel2ProcessCapability Extension

// Open the CSV file
dt = Open( "{{CSV_PATH}}" );

// Calculate process capability
capability = dt << Distribution(
    Continuous Distribution( Column( :{{VALUE_COLUMN}} ) ),
    Capability Analysis(
        Spec Limits( {{SPEC_LOWER}}, {{SPEC_UPPER}} ),
        Target( ({{SPEC_LOWER}} + {{SPEC_UPPER}}) / 2 )
    )
);

// Save capability analysis
capability << Save Picture( "process_capability_analysis.png" );

// Generate capability report
capability << Capability Report;

// Close the data table
Close( dt );
"""
    
    # Replace placeholders
    numeric_cols = df.select_dtypes(include=['number']).columns.tolist()
    if numeric_cols:
        template = template.replace('{{VALUE_COLUMN}}', numeric_cols[0])
    
    if 'spec_lower' in df.columns:
        spec_lower = df['spec_lower'].iloc[0]
        template = template.replace('{{SPEC_LOWER}}', str(spec_lower))
    
    if 'spec_upper' in df.columns:
        spec_upper = df['spec_upper'].iloc[0]
        template = template.replace('{{SPEC_UPPER}}', str(spec_upper))
    
    return template
