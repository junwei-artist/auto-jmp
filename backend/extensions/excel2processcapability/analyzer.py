import pandas as pd
import numpy as np
from typing import Dict, Any, List
from ..base.analyzer import BaseAnalyzer

class ProcessCapabilityAnalyzer(BaseAnalyzer):
    """Process Capability-specific analyzer"""
    
    def __init__(self, language: str = 'en'):
        self.language = language
        self.messages = {
            'en': {
                'missing_columns': "Missing required columns: {columns}",
                'value_not_numeric': "Value column must be numeric for process capability analysis",
                'spec_limits_required': "Specification limits must be provided",
                'spec_limits_invalid': "Specification lower limit must be less than upper limit",
                'data_valid': "Data is valid for process capability analysis"
            },
            'zh': {
                'missing_columns': "缺少必需的列: {columns}",
                'value_not_numeric': "值列必须是数值类型才能进行过程能力分析",
                'spec_limits_required': "必须提供规格限制",
                'spec_limits_invalid': "规格下限必须小于上限",
                'data_valid': "数据适合进行过程能力分析"
            }
        }
    
    def get_analysis_type(self) -> str:
        return "process_capability"
    
    def get_supported_charts(self) -> List[str]:
        return [
            'cpk_analysis',
            'ppk_analysis', 
            'capability_histogram',
            'control_chart',
            'capability_summary',
            'six_sigma_analysis'
        ]
    
    def get_required_columns(self) -> Dict[str, List[str]]:
        return {
            'cpk_analysis': ['value', 'spec_lower', 'spec_upper'],
            'ppk_analysis': ['value', 'spec_lower', 'spec_upper'],
            'capability_histogram': ['value', 'spec_lower', 'spec_upper'],
            'control_chart': ['value', 'subgroup'],
            'capability_summary': ['value', 'spec_lower', 'spec_upper'],
            'six_sigma_analysis': ['value', 'spec_lower', 'spec_upper']
        }
    
    def validate_data(self, df: pd.DataFrame, chart_type: str) -> Dict[str, Any]:
        """Validate data for process capability analysis"""
        required = self.get_required_columns().get(chart_type, [])
        missing = [col for col in required if col not in df.columns]
        
        if missing:
            return {
                'valid': False,
                'missing_columns': missing,
                'message': self.messages[self.language]['missing_columns'].format(columns=', '.join(missing))
            }
        
        # Check for numeric data
        numeric_cols = df.select_dtypes(include=[np.number]).columns.tolist()
        if 'value' not in numeric_cols:
            return {
                'valid': False,
                'message': self.messages[self.language]['value_not_numeric']
            }
        
        # Check specification limits
        if 'spec_lower' in required and 'spec_upper' in required:
            spec_lower = df['spec_lower'].iloc[0] if 'spec_lower' in df.columns else None
            spec_upper = df['spec_upper'].iloc[0] if 'spec_upper' in df.columns else None
            
            if spec_lower is None or spec_upper is None:
                return {
                    'valid': False,
                    'message': self.messages[self.language]['spec_limits_required']
                }
            
            if spec_lower >= spec_upper:
                return {
                    'valid': False,
                    'message': self.messages[self.language]['spec_limits_invalid']
                }
        
        return {
            'valid': True,
            'numeric_columns': numeric_cols,
            'message': self.messages[self.language]['data_valid']
        }
    
    def preprocess_data(self, df: pd.DataFrame, chart_type: str) -> pd.DataFrame:
        """Preprocess data for process capability analysis"""
        # Remove rows with missing values in required columns
        required = self.get_required_columns().get(chart_type, [])
        df_clean = df.dropna(subset=required)
        
        # Convert numeric columns
        numeric_cols = df_clean.select_dtypes(include=[np.number]).columns
        for col in numeric_cols:
            df_clean[col] = pd.to_numeric(df_clean[col], errors='coerce')
        
        return df_clean.dropna()
    
    def generate_jsl_template(self, df: pd.DataFrame, chart_type: str) -> str:
        """Generate JSL template for process capability analysis"""
        template = """// Auto-generated Process Capability JSL Script
// Generated by Excel2ProcessCapability Extension

// Open the CSV file
dt = Open( "{{CSV_PATH}}" );

// Calculate process capability
capability = dt << Distribution(
    Continuous Distribution( Column( :{{VALUE_COLUMN}} ) ),
    Capability Analysis(
        Spec Limits( {{SPEC_LOWER}}, {{SPEC_UPPER}} ),
        Target( ({{SPEC_LOWER}} + {{SPEC_UPPER}}) / 2 )
    )
);

// Save capability analysis
capability << Save Picture( "process_capability_analysis.png" );

// Generate capability report
capability << Capability Report;

// Close the data table
Close( dt );
"""
        
        # Replace placeholders
        numeric_cols = df.select_dtypes(include=[np.number]).columns.tolist()
        template = template.replace('{{VALUE_COLUMN}}', numeric_cols[0])
        
        if 'spec_lower' in df.columns:
            spec_lower = df['spec_lower'].iloc[0]
            template = template.replace('{{SPEC_LOWER}}', str(spec_lower))
        
        if 'spec_upper' in df.columns:
            spec_upper = df['spec_upper'].iloc[0]
            template = template.replace('{{SPEC_UPPER}}', str(spec_upper))
        
        return template
    
    def _calculate_confidence(self, df: pd.DataFrame, chart_type: str) -> float:
        """Calculate confidence for process capability suggestions"""
        numeric_cols = df.select_dtypes(include=[np.number]).columns
        
        if chart_type in ['cpk_analysis', 'ppk_analysis', 'capability_summary']:
            has_specs = 'spec_lower' in df.columns and 'spec_upper' in df.columns
            has_values = len(numeric_cols) >= 1
            return 0.9 if has_specs and has_values else 0.0
        elif chart_type == 'control_chart':
            has_subgroup = 'subgroup' in df.columns
            has_values = len(numeric_cols) >= 1
            return 0.8 if has_subgroup and has_values else 0.0
        else:
            return 0.7
