"""Add project membership system and comment system

Revision ID: 6b374d1124be
Revises: 86ba51ebc64f
Create Date: 2025-10-15 13:06:23.541192

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '6b374d1124be'
down_revision = '86ba51ebc64f'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('comment')
    
    # Create project_comment table if it doesn't exist
    op.execute("""
        CREATE TABLE IF NOT EXISTS project_comment (
            id UUID NOT NULL,
            project_id UUID NOT NULL,
            user_id UUID NOT NULL,
            parent_id UUID,
            content TEXT NOT NULL,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
            updated_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
            deleted_at TIMESTAMP WITH TIME ZONE,
            CONSTRAINT project_comment_pkey PRIMARY KEY (id),
            CONSTRAINT project_comment_parent_id_fkey FOREIGN KEY(parent_id) REFERENCES project_comment (id) ON DELETE CASCADE,
            CONSTRAINT project_comment_project_id_fkey FOREIGN KEY(project_id) REFERENCES project (id) ON DELETE CASCADE,
            CONSTRAINT project_comment_user_id_fkey FOREIGN KEY(user_id) REFERENCES app_user (id)
        )
    """)
    
    # Update role enum to include MEMBER and WATCHER
    op.execute("ALTER TYPE role ADD VALUE IF NOT EXISTS 'member'")
    op.execute("ALTER TYPE role ADD VALUE IF NOT EXISTS 'watcher'")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Drop project_comment table
    op.drop_table('project_comment')
    
    # Note: Cannot easily remove enum values in PostgreSQL, so we'll leave them
    # The enum values 'member' and 'watcher' will remain in the database
    
    op.create_table('comment',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('run_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('parent_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('deleted_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['parent_id'], ['comment.id'], name='comment_parent_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['run_id'], ['run.id'], name='comment_run_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['app_user.id'], name='comment_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='comment_pkey')
    )
    # ### end Alembic commands ###
