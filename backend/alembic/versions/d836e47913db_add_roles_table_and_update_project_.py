"""Add roles table and update project_member

Revision ID: d836e47913db
Revises: a60e75f8e59e
Create Date: 2025-10-15 16:50:59.178966

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'd836e47913db'
down_revision = 'a60e75f8e59e'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('project_role',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('display_name', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('permissions', sa.JSON(), nullable=True),
    sa.Column('is_system_role', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    
    # Insert default roles
    op.execute("""
        INSERT INTO project_role (id, name, display_name, description, permissions, is_system_role) VALUES
        ('00000000-0000-0000-0000-000000000001', 'OWNER', 'Project Owner', 'Full access to project including member management', '{"manage_members": true, "edit_project": true, "run_analysis": true, "view_project": true}', true),
        ('00000000-0000-0000-0000-000000000002', 'MEMBER', 'Project Member', 'Can run analysis and edit project content', '{"run_analysis": true, "edit_project": true, "view_project": true}', false),
        ('00000000-0000-0000-0000-000000000003', 'WATCHER', 'Project Watcher', 'Can only view project and results', '{"view_project": true}', false)
    """)
    
    # Add role_id column with a default value
    op.add_column('project_member', sa.Column('role_id', sa.UUID(), nullable=True))
    
    # Update existing records to map role strings to role IDs
    op.execute("""
        UPDATE project_member 
        SET role_id = '00000000-0000-0000-0000-000000000001' 
        WHERE role = 'OWNER'
    """)
    op.execute("""
        UPDATE project_member 
        SET role_id = '00000000-0000-0000-0000-000000000002' 
        WHERE role = 'member'
    """)
    op.execute("""
        UPDATE project_member 
        SET role_id = '00000000-0000-0000-0000-000000000003' 
        WHERE role = 'watcher'
    """)
    
    # Make role_id NOT NULL after populating it
    op.alter_column('project_member', 'role_id', nullable=False)
    
    # Create foreign key constraint
    op.create_foreign_key(None, 'project_member', 'project_role', ['role_id'], ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'project_member', type_='foreignkey')
    op.drop_column('project_member', 'role_id')
    op.drop_table('project_role')
    # ### end Alembic commands ###
