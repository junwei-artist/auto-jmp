#!/usr/bin/env python3
"""
OCR Processor Module
===================

Handles OCR (Optical Character Recognition) processing of images,
specifically for initial.png and final.png files generated by JMP.

Features:
- Convert images to text using Tesseract OCR
- Handle different image formats and qualities
- Extract structured data from JMP visualizations
- Store OCR results alongside original images

Usage:
    from app.core.ocr_processor import OCRProcessor
    
    processor = OCRProcessor()
    text_result = processor.process_image("path/to/image.png")
    print(f"Extracted text: {text_result}")
"""

import os
import logging
from pathlib import Path
from typing import Dict, Optional, Tuple, List
import tempfile
import shutil

# Optional imports for OCR functionality
try:
    import pytesseract
    from PIL import Image
    OCR_AVAILABLE = True
except ImportError:
    OCR_AVAILABLE = False
    print("Warning: OCR dependencies not available. Install with: pip install pytesseract pillow")

logger = logging.getLogger(__name__)


class OCRProcessor:
    """
    OCR processor for converting images to text.
    
    Handles the conversion of initial.png and final.png images
    generated by JMP into structured text data.
    """
    
    def __init__(self, tesseract_path: Optional[str] = None):
        """
        Initialize OCR processor.
        
        Args:
            tesseract_path: Optional path to tesseract executable
        """
        self.ocr_available = OCR_AVAILABLE
        
        if not self.ocr_available:
            logger.warning("OCR functionality not available - install pytesseract and pillow")
            return
            
        # Configure tesseract path if provided
        if tesseract_path:
            pytesseract.pytesseract.tesseract_cmd = tesseract_path
        
        # OCR configuration for better accuracy
        self.ocr_config = '--oem 3 --psm 6 -c tessedit_char_whitelist=0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz.,-+()[]{}:;!?@#$%^&*_=<>/\\|"\'`~ '
        
        logger.info("OCR Processor initialized")
    
    def is_available(self) -> bool:
        """Check if OCR functionality is available."""
        return self.ocr_available
    
    def process_image(self, image_path: str | Path) -> Dict[str, any]:
        """
        Process an image file and extract text using OCR.
        
        Args:
            image_path: Path to the image file
            
        Returns:
            Dictionary containing OCR results and metadata
        """
        if not self.ocr_available:
            return {
                "success": False,
                "error": "OCR functionality not available",
                "text": "",
                "confidence": 0.0
            }
        
        image_path = Path(image_path)
        
        if not image_path.exists():
            return {
                "success": False,
                "error": f"Image file not found: {image_path}",
                "text": "",
                "confidence": 0.0
            }
        
        try:
            logger.info(f"Processing image with OCR: {image_path}")
            
            # Load and preprocess image
            image = Image.open(image_path)
            
            # Convert to RGB if necessary
            if image.mode != 'RGB':
                image = image.convert('RGB')
            
            # Extract text using OCR
            text = pytesseract.image_to_string(image, config=self.ocr_config)
            
            # Get confidence data
            try:
                data = pytesseract.image_to_data(image, output_type=pytesseract.Output.DICT)
                confidences = [int(conf) for conf in data['conf'] if int(conf) > 0]
                avg_confidence = sum(confidences) / len(confidences) if confidences else 0
            except Exception as e:
                logger.warning(f"Could not extract confidence data: {e}")
                avg_confidence = 0.0
            
            # Clean up text
            cleaned_text = self._clean_text(text)
            
            result = {
                "success": True,
                "text": cleaned_text,
                "raw_text": text,
                "confidence": avg_confidence,
                "image_path": str(image_path),
                "image_size": image.size,
                "text_length": len(cleaned_text)
            }
            
            logger.info(f"OCR completed successfully. Extracted {len(cleaned_text)} characters with {avg_confidence:.1f}% confidence")
            return result
            
        except Exception as e:
            error_msg = f"OCR processing failed: {str(e)}"
            logger.error(error_msg)
            return {
                "success": False,
                "error": error_msg,
                "text": "",
                "confidence": 0.0
            }
    
    def process_initial_final_images(self, task_dir: Path) -> Dict[str, any]:
        """
        Process initial.png and final.png images from a task directory.
        
        Args:
            task_dir: Path to the task directory
            
        Returns:
            Dictionary containing OCR results for both images
        """
        results = {
            "initial": None,
            "final": None,
            "success": False,
            "error": None
        }
        
        if not self.ocr_available:
            results["error"] = "OCR functionality not available"
            return results
        
        try:
            # Process initial.png
            initial_path = task_dir / "initial.png"
            if initial_path.exists():
                logger.info("Processing initial.png with OCR")
                results["initial"] = self.process_image(initial_path)
            else:
                logger.warning("initial.png not found in task directory")
                results["initial"] = {
                    "success": False,
                    "error": "initial.png not found",
                    "text": "",
                    "confidence": 0.0
                }
            
            # Process final.png
            final_path = task_dir / "final.png"
            if final_path.exists():
                logger.info("Processing final.png with OCR")
                results["final"] = self.process_image(final_path)
            else:
                logger.warning("final.png not found in task directory")
                results["final"] = {
                    "success": False,
                    "error": "final.png not found",
                    "text": "",
                    "confidence": 0.0
                }
            
            # Determine overall success
            initial_success = results["initial"]["success"] if results["initial"] else False
            final_success = results["final"]["success"] if results["final"] else False
            
            results["success"] = initial_success or final_success
            
            if not results["success"]:
                results["error"] = "Failed to process both initial.png and final.png"
            
            logger.info(f"OCR processing completed. Initial: {initial_success}, Final: {final_success}")
            return results
            
        except Exception as e:
            error_msg = f"Error processing initial/final images: {str(e)}"
            logger.error(error_msg)
            results["error"] = error_msg
            return results
    
    def _clean_text(self, text: str) -> str:
        """
        Clean and normalize OCR text output.
        
        Args:
            text: Raw OCR text
            
        Returns:
            Cleaned text
        """
        if not text:
            return ""
        
        # Remove excessive whitespace
        lines = text.split('\n')
        cleaned_lines = []
        
        for line in lines:
            # Remove leading/trailing whitespace
            line = line.strip()
            
            # Skip empty lines
            if not line:
                continue
            
            # Skip lines that are mostly whitespace or special characters
            if len(line.replace(' ', '').replace('\t', '')) < 2:
                continue
            
            cleaned_lines.append(line)
        
        # Join lines with single newlines
        cleaned_text = '\n'.join(cleaned_lines)
        
        # Remove multiple consecutive newlines
        while '\n\n\n' in cleaned_text:
            cleaned_text = cleaned_text.replace('\n\n\n', '\n\n')
        
        return cleaned_text.strip()
    
    def save_ocr_results(self, ocr_results: Dict, output_path: Path) -> bool:
        """
        Save OCR results to a JSON file.
        
        Args:
            ocr_results: OCR processing results
            output_path: Path to save the results
            
        Returns:
            True if successful, False otherwise
        """
        try:
            import json
            
            # Ensure output directory exists
            output_path.parent.mkdir(parents=True, exist_ok=True)
            
            # Save results
            with open(output_path, 'w', encoding='utf-8') as f:
                json.dump(ocr_results, f, indent=2, ensure_ascii=False)
            
            logger.info(f"OCR results saved to: {output_path}")
            return True
            
        except Exception as e:
            logger.error(f"Failed to save OCR results: {e}")
            return False
    
    def move_images_after_ocr(self, task_dir: Path, ocr_results: Dict) -> bool:
        """
        Move initial.png and final.png to the task directory only after OCR processing.
        
        Args:
            task_dir: Task directory path
            ocr_results: OCR processing results
            
        Returns:
            True if successful, False otherwise
        """
        try:
            # Check if OCR was successful for at least one image
            initial_success = ocr_results.get("initial", {}).get("success", False)
            final_success = ocr_results.get("final", {}).get("success", False)
            
            if not (initial_success or final_success):
                logger.warning("OCR processing failed - not moving images to task directory")
                return False
            
            # Move initial.png if OCR was successful
            if initial_success:
                initial_temp = task_dir / "initial_temp.png"
                initial_final = task_dir / "initial.png"
                
                if initial_temp.exists() and not initial_final.exists():
                    shutil.move(str(initial_temp), str(initial_final))
                    logger.info("Moved initial.png to task directory after successful OCR")
            
            # Move final.png if OCR was successful
            if final_success:
                final_temp = task_dir / "final_temp.png"
                final_final = task_dir / "final.png"
                
                if final_temp.exists() and not final_final.exists():
                    shutil.move(str(final_temp), str(final_final))
                    logger.info("Moved final.png to task directory after successful OCR")
            
            return True
            
        except Exception as e:
            logger.error(f"Failed to move images after OCR: {e}")
            return False


def check_ocr_dependencies() -> bool:
    """
    Check if OCR dependencies are properly installed.
    
    Returns:
        True if all dependencies are available, False otherwise
    """
    if not OCR_AVAILABLE:
        print("❌ OCR dependencies not installed")
        print("Install with: pip install pytesseract pillow")
        return False
    
    try:
        # Test tesseract installation
        pytesseract.get_tesseract_version()
        print("✅ OCR dependencies are properly installed")
        return True
    except Exception as e:
        print(f"❌ Tesseract not properly configured: {e}")
        print("Make sure tesseract is installed and in your PATH")
        return False


if __name__ == "__main__":
    # Test OCR functionality
    print("Testing OCR Processor...")
    
    if check_ocr_dependencies():
        processor = OCRProcessor()
        
        # Test with a sample image if available
        test_image = Path("test_image.png")
        if test_image.exists():
            result = processor.process_image(test_image)
            print(f"OCR Test Result: {result}")
        else:
            print("No test image found - OCR processor is ready for use")
    else:
        print("OCR processor not available - install dependencies first")
